
color: (<num r{0-1}>, <num g{0-1}>, <num b{0-1}>) || (<str color{"0x000000"-"0xFFFFFF"}>) normalized
dir: (<num x{0-1}>, <num y{0-1}>, <num z{0-1}>) normalized
pos: (<num x{-0+}>, <num y{-0+}>, <num z{-0+}>)

================================================

[x]	push()
[x]	pop()

[x]	translate(<num x>, <num y>, <num z>)
[x]	rotate(<num x>, <num y>, <num z>)

[ ]	DistantLight([str name])
[ ]		.color(<color lightColor>)
[ ]		.intensity(<num lightStrength {0+}>)
[ ]		.glare(<num lightGlare {0+}>)
[ ]		.dir(<dir lightDir>)
	
[x]	PointLight([str name])
[x]		.color(<color lightColor>)
[x]		.intensity(<num lightStrength {0+}>)
[x]		.dispersion(<num lightDispersion {0+}>)
[x]		.glare(<num lightGlare {0+}>)
[ ]		.pos(<pos lightPos>)
	
[ ]	SpotLight([str name])
[ ]		.color(<color lightColor>)
[ ]		.intensity(<num lightStrength {0+}>)
[ ]		.dispersion(<num lightDispersion {0+}>)
[ ]		.glare(<num lightGlare {0+}>)
[ ]		.pos(<pos lightPos>)
[ ]		.dir(<dir lightDir>)
[ ]		.fieldAperture(<num aperture{0-1}>)
[ ]		.fieldIntensity(<num fractionOfIntensity{0-1}>)
[ ]		.beamAperture(<num aperture{0-1}>)
[ ]		.beamGradient(<num fractionOfBeamAperture{0-1}>)
	
[ ]	WaveTexture(<str name>)
[ ]		.xWaveColors(<color firstColor>, <color secondColor>)
[ ]		.yWaveColors(<color firstColor>, <color secondColor>)
[ ]		.xWaveOpacity(<num opacity{0-1}>)
[ ]		.yWaveOpacity(<num opacity{0-1}>)
[ ]		.offset(<num x{-0+}>, <num y{-0+}>)
[ ]		.scale(<num xyScale{-0+}> || <<num x{-0+}>, <num y{-0+}>>)
	
[ ]	CheckerboardTexture(<str name>)
[ ]		.colors(<color firstColor>, <color secondColor>)
[ ]		.offset(<num x{-0+}>, <num y{-0+}>)
[ ]		.scale(<num xyScale{-0+}> || <<num x{-0+}>, <num y{-0+}>>)
	
[x]	Material(<str name>)
[x]		.color(<color surfaceColor>)
[x]		.reflection(<num reflectionAmmount>)
[x]		.refraction(<num refractionAmmount>)
[x]		.refractionIndex(<num refractionIndex>)
[x]		.emission(<num emissionAmmount>)
[x]		.ignoresLight()
[x]		.specular(<num specularAmmount>)
[x]		.specularColor(<color specularColor>)
[x]		.specularExponent(<num specularExponent>)
[x]		.projectionLevels(<num projectionLevels>)
[x]		.texture(<str textureName>)
	
[ ]	Texture(<str name>, <str imagePath>)
[ ]		.offset(<num x{-0+}>, <num y{-0+}>)
[ ]		.scale(<num xyScale{-0+}> || <<num x{-0+}>, <num y{-0+}>>)
[ ]		.filter(<var NEAREST> | <var BILINEAR>)
	
[x]	Sphere([str name])
[ ]		.pos()
[ ]		.rot()
[x]		.radius(<num radius>)
[x]		.material(<str material_name>)
	
[x]	AlignedCube([str name])
[ ]		.pos()
[x]		.size(<num size> || <num xSize>, <num ySize>, <num zSize>)
	
[ ]	Cone([str name])
[ ]		.pos()
[ ]		.rot()
[ ]		.angle(<num angle>)
[ ]		.material(<str material_name>)
	
[ ]	Cylinder([str name])
[ ]		.pos()
[ ]		.rot()
[ ]		.radius(<num radius>)
[ ]		.material(<str material_name>)
	
[ ]	Plane([str name])
[ ]		.pos()
[ ]		.rot()
[ ]		.material(<str material_name>)
	
[ ]	Camera()
[ ]		.pos()
[ ]		.rot()
	
[x]	Config()
[x]		.ambientColor()
[x]		.ambientIntensity()
[x]		.camLightColor()
[x]		.camLightIntensity()
[x]		.recursionDepth()
[x]		.projectionDepth()
[x]		.postFilter(POST_FILTER_NONE + POST_FILTER_GRAYSCALE + POST_FILTER_SEPIA)
[x]		.screenSize(width, height)
[x]		.sampleLevel()
[x]		.zFar()



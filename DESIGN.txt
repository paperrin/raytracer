typedef struct		s_intersec_info
{
	ray; 8 * 4 * 2
	t; 8
	importance; 8
	pixelID; 4
	objID; 4
}					t_intersec_info;
RRRRRRRR RRRRRRRR RRRRRRRR RRRRRRRR RRRRRRRR RRRRRRRR RRRRRRRR RRRRRRRR TTTTTTTT IIIIIIII PPPPOOOO

k_ray_gen() <- Generates primary rays
for_each(ray_depth):
	k_ray_trace() <- Checks for ray intersections and returns intersection info
	k_secondary_count() <- Counts secondary rays
	if (ray_count > rays_size)
		realloc(rays, ray_count)
	k_ray_shade() <- Computes pixel color for each ray and counts secondary rays
k_image_gen()

//
	color = MIN_MAX(0, color + Co * Cl * Li, 1) * Fabs + Crfl * Frfl + Crfr * Frfr;
//

k_ray_shade:
	pxls[pixelID] += shade(intersec_info) * material_absorption * importance
	if (material has reflection)
		add new intersec_info to list:
			pixelID = parent's pixelID
			importance = parent's importance * material_reflection
	if (material has refraction)
		add new intersec_info to list:
			pixelID = parent's pixelID
			importance = parent's importance * material_refraction


		6 2 2
1					4 4 2
				1			1
c = 0
c += 0.6

c += 1 * 0.2
c += 0.4 * 0.2	importance = 1 * 0.2

c += 0.2 * 0.4 * 1		importance = 1 * 0.2 * 0.4
c += 0.2 * 0.2 * 1


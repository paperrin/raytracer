Config()
	.sampleLevel(1)
	.screenSize(960, 540)
	.ambientColor(1, 1, 1)
	.fxaa(true)
	.ambientIntensity(0.15)

set("r_scale", 1 / 10000)
set("d_scale", 1 / 10000)

set("sun_r",     695700.0 * r_scale)
set("mercury_r",   2439.7 * r_scale) set("mercury_sun_d",   57000000 * d_scale)
set("venus_r",     6051.8 * r_scale) set("venus_sun_d",    108000000 * d_scale)
set("earth_r",     6378.1 * r_scale) set("earth_sun_d",    150000000 * d_scale)
set("moon_r",      1738.1 * r_scale) set("moon_earth_d",      384400 * d_scale)
set("mars_r",      3396.2 * r_scale) set("mars_sun_d",     228000000 * d_scale)
set("jupiter_r",  71492.0 * r_scale) set("jupiter_sun_d",  779000000 * d_scale)
set("saturn_r",   60268.0 * r_scale) set("saturn_sun_d",  1430000000 * d_scale)
set("uranus_r",   25559.0 * r_scale) set("uranus_sun_d",  2880000000 * d_scale)
set("neptune_r",  24764.0 * r_scale) set("neptune_sun_d", 4500000000 * d_scale)
set("pluto_r",     2377.0 * r_scale) set("pluto_sun_d",   5910000000 * d_scale)

set("offset", 1)

#PointLight("sun")

Texture("tex_stars", "textures/planets/stars.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_sun", "textures/planets/sun.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_mercury", "textures/planets/mercury.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_venus", "textures/planets/venus.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_earth", "textures/planets/earth.ppm")
   .filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_moon", "textures/planets/moon.ppm")
   .filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_mars", "textures/planets/mars.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_jupiter", "textures/planets/jupiter.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_saturn", "textures/planets/saturn.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_uranus", "textures/planets/uranus.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_neptune", "textures/planets/neptune.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)
Texture("tex_pluto", "textures/planets/pluto.ppm")
	.filter(TEXTURE_FILTER_BILINEAR)

Material("mat_stars")
	.colorMap("tex_stars")
	.emission(1)
	.ignoresLight()
Material("mat_sun")
	.colorMap("tex_sun")
	.emission(2)
	.ignoresLight()
Material("mat_mercury")
	.colorMap("tex_mercury")
Material("mat_venus")
	.colorMap("tex_venus")
Material("mat_earth")
	.colorMap("tex_earth")
Material("mat_moon")
	.colorMap("tex_moon")
Material("mat_mars")
	.colorMap("tex_mars")
Material("mat_jupiter")
	.colorMap("tex_jupiter")
Material("mat_saturn")
	.colorMap("tex_saturn")
Material("mat_uranus")
	.colorMap("tex_uranus")
Material("mat_neptune")
	.colorMap("tex_neptune")
Material("mat_pluto")				
	.colorMap("tex_pluto")				

Camera()
	.fov(70)
	.pos(sun_r + earth_r, 0, earth_r * -1 - 2)
	.moveSpeed(10)

DistantLight()
	.rot(-90, 0, 0)

ObjSphere()
	.material("mat_stars")
	.radius(sun_r * 100)

ObjSphere()
	.material("mat_sun")
	.radius(sun_r)
PointLight()
	.color(1, 0.5, 0)
	.glare(0.45)
	.intensity(0)
	.dispersion(0)

push()
	translate(sun_r + mercury_r, 0, 0)
	push()
		ObjSphere()
			.radius(mercury_r)
			.material("mat_mercury")
	pop()
	translate(mercury_r + venus_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(venus_r)
			.material("mat_venus")
	pop()
	translate(venus_r + earth_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(earth_r)
			.material("mat_earth")
		push()
			translate(0, earth_r + moon_r + offset, 0)
			ObjSphere()
				.radius(moon_r)
				.material("mat_moon")
		pop()
	pop()
	translate(earth_r + mars_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(mars_r)
			.material("mat_mars")
	pop()
	translate(mars_r + jupiter_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(jupiter_r)
			.material("mat_jupiter")
	pop()
	translate(jupiter_r + saturn_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(saturn_r)
			.material("mat_saturn")
	pop()
	translate(saturn_r + uranus_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(uranus_r)
			.material("mat_uranus")
	pop()
	translate(uranus_r + neptune_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(neptune_r)
			.material("mat_neptune")
	pop()
	translate(neptune_r + pluto_r + offset, 0, 0)
	push()
		ObjSphere()
			.radius(pluto_r)
			.material("mat_pluto")
	pop()
pop()
